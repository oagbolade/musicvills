{"version":3,"sources":["components/LoadingSpinner/spinner.gif","components/homepage/home.js","components/LoadingSpinner/Spinner.js","ReduxBoilerPlate/actions/ViewLyricsActions.js","ReduxBoilerPlate/actions/types.js","components/modal/Modal.js","components/resultspage/results.js","ReduxBoilerPlate/actions/getSongsActions.js","ReduxBoilerPlate/reducers/SearchSongReducer.js","ReduxBoilerPlate/reducers/ViewLyricsReducer.js","ReduxBoilerPlate/reducers/index.js","ReduxBoilerPlate/store.js","App.js","index.js"],"names":["module","exports","Home","props","state","songTitle","redirect","onChange","bind","search","this","setState","e","target","name","value","to","className","style","bodyComponentHome","textDescription","searchBar","type","placeholder","onClick","Component","Spinner","styles","spinnerMain","src","SpinnerGif","alt","viewLyrics","track_id","dispatch","preparedURL","params","apikey","axios","get","then","lyrics","payload","catch","error","console","log","Modal","trackId","viewLyricsProps","length","isOpen","lyricsExists","modal","modalMain","modalHead","songName","modalBody","data","message","body","lyrics_body","modalButton","modalFooter","closeModal","connect","items","Result","loading","modalIsOpen","trackName","openModal","getTrackId","getTrackName","getSongs","match","id","songProps","allSongs","SongsExists","track_list","map","songs","resultCard","cardHead","track","track_name","cardBody","artist_name","album_name","cardFooter","button","commontrack_id","bodyComponentResults","backButton","resultContainer","q_track","f_has_lyrics","initialState","item","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","exact","path","component","Homepage","Results","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3730927.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.708d73ae.gif\";","import React, { Component } from \"react\";\r\nimport {\r\n  Redirect,\r\n  BrowserRouter as Router\r\n} from \"react-router-dom\";\r\nimport style from \"../../css/Home.css\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { songTitle: \"\", redirect: false };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  search() {\r\n    this.setState({ redirect: true });\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirect === true) {\r\n      return <Redirect to={`/results/${this.state.songTitle}`} />;\r\n    }\r\n\r\n    return (\r\n      <div className={style.bodyComponentHome}>\r\n        <div className={style.textDescription}>\r\n          <h3>Musicvills</h3>\r\n          <h6>Discover lyrics to over 100 million songs worldwide</h6>\r\n        </div>\r\n        <div className={style.searchBar}>\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter song title...\"\r\n              name=\"songTitle\"\r\n              value={this.state.songTitle}\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <button type=\"button\" onClick={this.search}>\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport SpinnerGif from \"./spinner.gif\";\r\nimport styles from './spinner.css';\r\n\r\nclass Spinner extends Component {\r\n  render() {\r\n    return (\r\n      <div className={styles.spinnerMain}>\r\n        <img src={SpinnerGif} alt=\"loading...\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;","import { VIEW_LYRICS } from \"./types\";\nimport axios from \"axios\";\n\nexport const viewLyrics = (track_id) => dispatch => {\n  const CORS = \"https://cors-anywhere.herokuapp.com/\";\n  const URL =\n    \"http://api.musixmatch.com/ws/1.1/track.lyrics.get\";\n  const preparedURL = `${CORS}${URL}`;\n  const params = {\n    track_id,\n    apikey: \"d175c41a09dfcb1098e2f6fcce494ad7\"\n  };\n\n  axios\n    .get(preparedURL, { params })\n    .then(lyrics =>\n      dispatch({\n        type: VIEW_LYRICS,\n        payload: lyrics\n      })\n    )\n    .catch(error => console.log(error));\n};","export const GET_SONGS = \"GET_SONGS\";\nexport const VIEW_LYRICS = \"VIEW_LYRICS\";","import React, { Component } from \"react\";\r\nimport styles from \"./modal.css\";\r\nimport Spinner from \"./../LoadingSpinner/Spinner\";\r\nimport { connect } from \"react-redux\";\r\nimport { viewLyrics } from \"../../ReduxBoilerPlate/actions/ViewLyricsActions\";\r\n\r\nclass Modal extends Component {\r\n  componentDidUpdate() {\r\n    this.props.viewLyrics(this.props.trackId);\r\n  }\r\n\r\n  lyricsExists() {\r\n    if (this.props.viewLyricsProps.length !== 0) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.props.isOpen && this.lyricsExists()) {\r\n      return (\r\n        <div>\r\n          <div className={styles.modal}>\r\n            <section className={styles.modalMain}>\r\n              <div className={styles.modalHead}>\r\n                <b>Song Name</b>: {this.props.songName}\r\n              </div>\r\n              <div className={styles.modalBody}>\r\n                {this.props.viewLyricsProps.data.message.body.length !== 0\r\n                  ? this.props.viewLyricsProps.data.message.body.lyrics\r\n                      .lyrics_body\r\n                  : \"Lyrics to this song is not available, try searching for another song\"}\r\n              </div>\r\n              <div className={(styles.modalButton, styles.modalFooter)}>\r\n                <button onClick={this.props.closeModal}>close</button>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.props.isOpen) {\r\n      return <Spinner />;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  viewLyricsProps: state.viewLyrics.items\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { viewLyrics }\r\n)(Modal);\r\n","import React, { Component } from \"react\";\r\nimport { Link, BrowserRouter as Router } from \"react-router-dom\";\r\nimport style from \"../../css/Results.css\";\r\nimport Modal from \"./../modal/Modal\";\r\nimport Spinner from \"./../LoadingSpinner/Spinner\";\r\nimport { connect } from \"react-redux\";\r\nimport { getSongs } from \"../../ReduxBoilerPlate/actions/getSongsActions\";\r\nimport { viewLyrics } from \"../../ReduxBoilerPlate/actions/ViewLyricsActions\";\r\n\r\nclass Result extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      modalIsOpen: false,\r\n      lyrics: {},\r\n      trackId: null,\r\n      trackName: null\r\n    };\r\n\r\n    this.openModal = this.openModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n    this.getTrackId = this.getTrackId.bind(this);\r\n    this.getTrackName = this.getTrackName.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getSongs(this.props.match.params.songTitle);\r\n  }\r\n\r\n  openModal(id, trackName) {\r\n    this.getTrackId(id);\r\n    this.getTrackName(trackName);\r\n    this.setState({ modalIsOpen: true });\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({ modalIsOpen: false });\r\n  }\r\n\r\n  getTrackId(id) {\r\n    this.setState({ trackId: id });\r\n    //this.props.viewLyrics(15953433);\r\n  }\r\n\r\n  getTrackName(trackName) {\r\n    this.setState({ trackName });\r\n  }\r\n\r\n  loading() {\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  SongsExists() {\r\n    if (this.props.songProps.length !== 0) {\r\n      console.log(this.props.songProps);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let allSongs = null;\r\n    if (this.SongsExists()) {\r\n      allSongs = this.props.songProps.data.message.body.track_list.map(\r\n        songs => (\r\n          <div className={style.resultCard}>\r\n            <div className={style.cardHead}>\r\n              <b>Song Name </b> <span>{songs.track.track_name}</span>\r\n            </div>\r\n            <div className={style.cardBody}>\r\n              <b>Artist Name </b> <span>{songs.track.artist_name}</span>\r\n              <b>Album Name</b> <span>{songs.track.album_name}</span>\r\n            </div>\r\n            <div className={style.cardFooter}>\r\n              <button\r\n                className={style.button}\r\n                onClick={() =>\r\n                  this.openModal(\r\n                    songs.track.commontrack_id,\r\n                    songs.track.track_name\r\n                  )\r\n                }\r\n                type=\"button\"\r\n              >\r\n                View Lyrics\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={style.bodyComponentResults}>\r\n        <div className={style.backButton}>\r\n          <Link to=\"/\">\r\n            <button type=\"button\">Back</button>\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          {this.SongsExists() ? (\r\n            <div className={style.resultContainer}>{allSongs}</div>\r\n          ) : (\r\n            <Spinner />\r\n          )}\r\n        </div>\r\n        <Modal\r\n          isOpen={this.state.modalIsOpen}\r\n          trackId={this.state.trackId}\r\n          closeModal={this.closeModal}\r\n          songName={this.state.trackName}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  songProps: state.search.items,\r\n  viewLyricsProps: state.viewLyrics.items\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getSongs, viewLyrics }\r\n)(Result);\r\n","import { GET_SONGS, VIEW_LYRICS } from \"./types\";\nimport axios from \"axios\";\n\nexport const getSongs = songTitle => dispatch => {\n  const CORS = \"https://cors-anywhere.herokuapp.com/\";\n  const URL = \"http://api.musixmatch.com/ws/1.1/track.search\";\n  const preparedURL = `${CORS}${URL}`;\n  const params = {\n    q_track: songTitle,\n    f_has_lyrics: true,\n    apikey: \"d175c41a09dfcb1098e2f6fcce494ad7\"\n  };\n\n  axios\n    .get(preparedURL, { params })\n    .then(songs =>\n      dispatch({\n        type: GET_SONGS,\n        payload: songs\n      })\n    )\n    .catch(error => console.log(error));\n};","import { GET_SONGS } from \"../actions/types\";\n\nconst initialState = {\n  items: [],\n  item: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_SONGS:\n      return {\n        ...state,\n        items: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { VIEW_LYRICS } from \"../actions/types\";\n\nconst initialState = {\n  items: [],\n  item: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case VIEW_LYRICS:\n      return {\n        ...state,\n        items: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport SearchSongReducer from \"./SearchSongReducer\";\nimport ViewLyricsReducer from \"./ViewLyricsReducer\";\n\nexport default combineReducers({\n  search: SearchSongReducer,\n  viewLyrics: ViewLyricsReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport Homepage from \"./components/homepage/home\";\nimport Results from \"./components/resultspage/results\";\nimport Spinner from \"./components/LoadingSpinner/Spinner\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport store from \"./ReduxBoilerPlate/store\";\nimport { Provider } from \"react-redux\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Homepage} />\n            <Route path=\"/results/:songTitle\" component={Results} />\n            <Route path=\"/spinner\" component={Spinner} />\n          </Switch>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}